# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet test
def test_${1}(self${2}) -> None:
    """${3}"""
endsnippet


snippet def "standard function or module" b
def $1($2) -> $3:
    """$4"""
endsnippet


snippet conf "boilerplate for conftest" b
def pytest_assertrepr_compare(config, op, left, right):
    """See full error diffs"""
    if op in ("==", "!="):
        return ["{0} {1} {2}".format(left, op, right)]
$1
endsnippet


snippet docmod "#!python" b
#!python
# last modified: `!v strftime("%Y-%m-%d")`
"""$1

:author: Shay Hill
:created: `!v strftime("%Y-%m-%d")`
"""
$2
endsnippet


snippet doctestmod "#!python" b
#!python
# last modified: `!v strftime("%Y-%m-%d")`
"""$1

:author: Shay Hill
:created: `!v strftime("%Y-%m-%d")`
"""
# pyright: reportPrivateUsage=false
# pyright: reportUnknownMemberType=false
# pyright: reportUnknownVariableType=false
# pyright: reportMissingParameterType=false
# pyright: reportUnknownParameterType=false
$2
endsnippet

