
snippet pre-commit-config
ci:
  skip: [poetry-lock,pyright]

exclude: "tests"

repos:

- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.4.0
  hooks:
    - id: check-added-large-files
    - id: check-ast
    - id: check-case-conflict
    - id: check-merge-conflict
    - id: check-symlinks
    - id: check-yaml
    - id: check-toml
    - id: check-xml
    - id: debug-statements
    - id: detect-private-key
    - id: end-of-file-fixer
    - id: mixed-line-ending
    - id: requirements-txt-fixer
    - id: trailing-whitespace
    - id: fix-encoding-pragma
      args:
      - --remove
    - id: name-tests-test
      args:
      - --pytest-test-first

- repo: https://github.com/python-poetry/poetry
  rev: 1.3.0
  hooks:
    - id: poetry-check
    - id: poetry-lock
    # - id: poetry-export
    #   args:
    #   - -f requirements.txt
    #   - -o requirements.txt

- repo: https://github.com/pre-commit/mirrors-mypy
  rev: v0.991
  hooks:
  - id: mypy
    name: mypy
    language: python
    language_version: python 3.11
    types: [python]
    require_serial: true
    verbose: true
    additional_dependencies: ['types-requests']
    # exclude: "tests"
    # args:
    # - --ignore-missing-imports
    # files: ^(src/|tests/)

- repo: https://github.com/PyCQA/isort
  rev: 5.12.0
  hooks:
  - id: isort
    args: ["--profile", "black", "--filter-files", "--combine-as"]

- repo: https://github.com/psf/black
  rev: 22.12.0
  hooks:
  - id: black
    language_version: python3.10
    args: ["--skip-magic-trailing-comma"]

- repo: https://github.com/asottile/pyupgrade
  rev: v3.3.1
  hooks:
  - args:
    - --py37-plus
    id: pyupgrade

- repo: https://github.com/Lucas-C/pre-commit-hooks
  rev: v1.4.2
  hooks:
  - id: remove-tabs

# - repo: https://github.com/commitizen-tools/commitizen
#   rev: v2.40.0
#   hooks:
#   - id: commitizen

- repo: https://github.com/pre-commit/mirrors-pylint
  rev: v3.0.0a5
  hooks:
  - id: pylint
    exclude: "tests"
    name: pylint
    args:
    - --good-names=i,j,_,f
    - --disable=protected-access
    - --disable=no-member
    - --disable=import-error
    - --disable=no-name-in-module
    - --load-plugins=pylint.extensions.docparams
    - --accept-no-param-doc=n
    - --accept-no-raise-doc=n
    - --accept-no-return-doc=n
    - --accept-no-yields-doc=n

- repo: https://github.com/charliermarsh/ruff-pre-commit
  # ignores
  # ANN101 Missing type annotation for self in method
  # ANN102 Missing type annotation for cls in classmethod
  # ANN201 Missing return type annotation for public function
  # ANN202 Missing return type annotation for private function (wants -> None everywhere)
  # B905 zip() without an explicit strict= parameter
  # COM812 Trailing comma missing
  # D203 1 blank line required before class docstring
  # D213 multi line summary second line
  # I001 Inport block is un-sorted or un-formatted
  # ISC003 Explicitly concatenated string should be implicitly concatenated
  # N802 Function name should be lowercase
  # N806 Variable in function should be lowercase
  # PGH003 Use specific rule codes when ignoring type issues
  # PLR0913 Too many arguments to function call
  # PTH108 os.unlink should be replaced by .unlink()
  rev: 'v0.0.238'
  hooks:
    - id: ruff
      exclude: "tests"
      args:
      - --select=ALL
      - --ignore=ANN101,ANN102,ANN201,ANN202,B905,COM812,D203,D213,I001,ISC003,N802,N806,PGH003,PLR0913,PTH108
      # - --fix

# reads pyproject.toml for additional config
- repo: https://github.com/RobertCraigie/pyright-python
  rev: v1.1.291
  hooks:
    - id: pyright
endsnippet


snippet ci
name: test and deploy

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [main]

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      # Install poetry. There are some redundant looking steps here. Windows
      # and Linux will work without the first two, but Mac (only Mac) will fail
      # unless you do this checkout, setup, checkout, install, setup sequence.
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pip install poetry
      - name: Install dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      - run: poetry config virtualenvs.in-project false && poetry install

      - name: Run tests
        run: poetry run pytest -v

  # Pyright fails EVERY TIME when called through pre-commit.ci with "Temporary
  # failure in name resolution". Bypass the pre-commit Pyright, and use a
  # Pyright pre-commit action instead.
  pyright:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - uses: jakebailey/pyright-action@v1
        with:
          project: "pyproject.toml"

  # If the tests pass, try to bump the version number. If no bump is warranted,
  # pass silently.
  bump_version:
    runs-on: ubuntu-latest
    name: "Bump version and create changelog with commitizen"
    continue-on-error: true
    needs: [tests, pyright]
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Check out
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: "${{ secrets.COMMITIZEN_BUMP }}"
      - id: cz
        name: Create bump and changelog
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.COMMITIZEN_BUMP }}
      - name: Print Version
        run: echo "Bumped to version ${{ steps.cz.outputs.version }}"

  # Deploy on test.pypi when pushed to dev if all tests pass and if commit is
  # tagged (a tagged release implies the version was bumped.)
  deploy-on-testpypi:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [tests]
    if: github.ref == 'refs/heads/dev' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v3
      - name: Run image
        uses: abatilo/actions-poetry@v2
      - name: deploy on test.pypi
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry publish -r test-pypi --build --username __token__ --password ${{ secrets.TEST_PYPI_API_TOKEN }}

  # Deploy on .pypi when pushed to main if all tests pass and if commit is
  # tagged (a tagged release implies the version was bumped.)
  deploy-on-pypi:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [tests]
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v3
      - name: Run image
        uses: abatilo/actions-poetry@v2
      - name: deploy on pypi
        run: |
          poetry publish --build --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
endsnippet
