
snippet ci-poetry

# THIS FILE IS SET UP FOR main AND dev BRANCHES. CHANGE THESE BRANCH NAMES TO SUIT YOUR PROJECT.
# THIS FILE IS SET UP FOR main AND dev BRANCHES. CHANGE THESE BRANCH NAMES TO SUIT YOUR PROJECT.
# THIS FILE IS SET UP FOR main AND dev BRANCHES. CHANGE THESE BRANCH NAMES TO SUIT YOUR PROJECT.
# THIS FILE IS SET UP FOR main AND dev BRANCHES. CHANGE THESE BRANCH NAMES TO SUIT YOUR PROJECT.
# THIS FILE IS SET UP FOR main AND dev BRANCHES. CHANGE THESE BRANCH NAMES TO SUIT YOUR PROJECT.
# THIS FILE IS SET UP FOR main AND dev BRANCHES. CHANGE THESE BRANCH NAMES TO SUIT YOUR PROJECT.
# THIS FILE IS SET UP FOR main AND dev BRANCHES. CHANGE THESE BRANCH NAMES TO SUIT YOUR PROJECT.
# THIS FILE IS SET UP FOR main AND dev BRANCHES. CHANGE THESE BRANCH NAMES TO SUIT YOUR PROJECT.

name: test and deploy

on:
  push:
    branches: [dev, master]
  pull_request:
    branches: [master]

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      # Install poetry. There are some redundant looking steps here. Windows
      # and Linux will work without the first two, but Mac (only Mac) will fail
      # unless you do this checkout, setup, checkout, install, setup sequence.
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pip install poetry
      - name: Install dependencies
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      - run: poetry config virtualenvs.in-project false && poetry install

      - name: Run tests
        run: poetry run pytest -v

  # Pyright fails EVERY TIME when called through pre-commit.ci with "Temporary
  # failure in name resolution". Bypass the pre-commit Pyright, and use a
  # Pyright pre-commit action instead.
  pyright:
    runs-on: ubuntu-latest
    name: "Run Pyright"
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - uses: jakebailey/pyright-action@v1
        with:
          project: "pyproject.toml"

  # Deploy on test.pypi when pushed to dev if all tests pass and if commit is
  # tagged (a tagged release implies the version was bumped.)
  deploy-on-testpypi:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [tests]
    if: github.ref_name == 'dev' && startsWith(github.event.head_commit.message, 'bump:')
    steps:
      - uses: actions/checkout@v3
      - name: Run image
        uses: abatilo/actions-poetry@v2
      - name: deploy on test.pypi
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry publish -r test-pypi --build --username __token__ --password ${{ secrets.TEST_PYPI_API_TOKEN }}

  # Deploy on .pypi when pushed to main if all tests pass and if commit is
  # tagged (a tagged release implies the version was bumped.)
  deploy-on-pypi:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [tests]
    if: github.ref_name == 'master' && startsWith(github.event.head_commit.message, 'bump:')
    steps:
      - uses: actions/checkout@v3
      - name: Run image
        uses: abatilo/actions-poetry@v2
      - name: deploy on pypi
        run: |
          poetry publish --build --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
endsnippet

snippet ci
# Run tests then upload to Pypi on version bumps.
# Run tests on each push.
# If version is bumped, upload to pypi or test.pypi depending on branch name.

name: pypi project

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [main]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    # if: startsWith(github.event.head_commit.message, 'bump:') == false
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -m pip install pytest
        python -m pip install commitizen
        python -m pip install .

    - name: Test with pytest
      run: |
        pip install numpy
        pip install colormath
        pytest

  # Deploy on test.pypi when branch is dev and commit message starts with 'bump'
  deploy-on-testpypi:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [tests]
    if: github.ref_name == 'dev' && startsWith(github.event.head_commit.message, 'bump:')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: python -m build
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          repository_url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  # Deploy on pypi when branch is main and commit message starts with 'bump'
  deploy-on-pypi:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [tests]
    if: github.ref_name == 'main' && startsWith(github.event.head_commit.message, 'bump:')
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: python -m build
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
endsnippet


snippet pre-commit-config
ci:
  skip: [pyright]

exclude: "tests"

repos:

- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.4.0
  hooks:
    - id: check-added-large-files
    - id: check-ast
    - id: check-case-conflict
    - id: check-docstring-first
    - id: check-executables-have-shebangs
    - id: check-json
    - id: check-merge-conflict
      args:
        - --assume-in-merge
    - id: check-shebang-scripts-are-executable
    - id: check-symlinks
    - id: check-toml
    - id: check-vcs-permalinks
    - id: check-xml
    - id: check-yaml
    - id: debug-statements
    - id: destroyed-symlinks
    # - id: detect-aws-credentials
    - id: detect-private-key
    - id: end-of-file-fixer
    - id: mixed-line-ending
    - id: requirements-txt-fixer
    - id: trailing-whitespace
    - id: fix-encoding-pragma
      args:
      - --remove
    - id: name-tests-test
      args:
      - --pytest-test-first
    - id: no-commit-to-branch
    - id: pretty-format-json
      args: ['--autofix']
    # - id: sort-simple-yaml
        # files: .pre-commit-config.yaml

- repo: https://github.com/pre-commit/mirrors-mypy
  rev: v0.991
  hooks:
  - id: mypy
    name: mypy
    language: python
    language_version: python 3.$2
    types: [python]
    require_serial: true
    verbose: true
    additional_dependencies: ['types-requests']
    # exclude: "tests"
    # args:
    # - --ignore-missing-imports
    # files: ^(src/|tests/)

- repo: https://github.com/asottile/pyupgrade
  rev: v3.3.1
  hooks:
  - args:
    - --py3$1-plus
    id: pyupgrade

- repo: https://github.com/Lucas-C/pre-commit-hooks
  rev: v1.4.2
  hooks:
  - id: remove-tabs

# - repo: https://github.com/commitizen-tools/commitizen
#   rev: v2.40.0
#   hooks:
#   - id: commitizen

# # This will only work with pylint installed in the venv
# - repo: local
#   hooks:
#   - id: pylint
#     exclude: "tests"
#     name: pylint
#     entry: ./venv/Scripts/pylint.exe
#     language: system
#     types: [python]
#     args:
#     - --ignore-patterns=venv
#     - --good-names=i,j,_,f
#     # - --disable=protected-access
#     # - --disable=no-member
#     # - --disable=import-error
#     # - --disable=no-name-in-module
#     - --disable=redundant-returns-doc # many false positives
#     - --disable=too-many-arguments
#     - --disable=too-many-instance-attributes
#     - --disable=redefined-builtin # sticking with edge.next
#     - --disable=invalid-name # for _TMeshElem and similar type hints
#     - --disable=useless-return # conflicts with mypy
#     - --disable=assignment-from-no-return # prevents overloading Attrib methods to only raise an Exception
#     - --disable=useless-parent-delegation
#     - --disable=R0801 # Similar lines in multiple files
#     - --load-plugins=pylint.extensions.docparams
#     - --accept-no-param-doc=n
#     - --accept-no-raise-doc=n
#     - --accept-no-return-doc=n
#     - --accept-no-yields-doc=n

- repo: https://github.com/charliermarsh/ruff-pre-commit
  # ignores
  # COM812 Trailing comma missing (does not agree with Black)
  # D203 1 blank line required before class docstring (incompatible with D211)
  # D213 multi line summary second line (incompatible with D212):
  # ISC003 Explicitly concatenated string should be implicitly concatenated
  rev: 'v0.3.4'
  hooks:
    - id: ruff
      exclude: "tests"
      args:
      - --target-version=py3$1
      - --select=ALL
      - --ignore=COM812,D203,D213,ISC003
      - --fix
      - --fixable=RUF022
    - id: ruff
      args: ["check", "--select", "I", "--fix"]
    - id: ruff-format
      name: "ruff-format"

# reads pyproject.toml for additional config
- repo: https://github.com/RobertCraigie/pyright-python
  rev: v1.1.291
  hooks:
    - id: pyright
endsnippet

